/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool check(TreeNode* p, TreeNode* q) {
        if (p == nullptr && q == nullptr) {
            return true; // Both nodes are null, trees are identical in this branch
        }
        if (p == nullptr || q == nullptr) {
            return false; // One node is null, and the other is not, trees are not identical
        }
        if (p->val != q->val) {
            return false; // Node values are different, trees are not identical
        }

        bool leftCheck = check(p->left, q->left); // Check left subtrees
        bool rightCheck = check(p->right, q->right); // Check right subtrees

        return leftCheck && rightCheck; // Combine the results
    }

    bool isSameTree(TreeNode* p, TreeNode* q) {
        return check(p, q);
    }
};
