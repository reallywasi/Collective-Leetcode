#include <vector>
#include <algorithm>

class Solution {
public:
    int minimumTotal(std::vector<std::vector<int>>& triangle) {
        int n = triangle.size();
        
        // Create a dp table with dimensions n x n
        std::vector<std::vector<int>> dp(n, std::vector<int>(n, 0));
        
        // Initialize the last row of dp table with values from the triangle
        for (int j = 0; j < n; ++j) {
            dp[n-1][j] = triangle[n-1][j];
        }
        
        // Fill the dp table from bottom to top
        for (int i = n - 2; i >= 0; --i) {
            for (int j = 0; j <= i; ++j) {
                // Calculate minimum path sum for cell (i, j)
                dp[i][j] = triangle[i][j] + std::min(dp[i+1][j], dp[i+1][j+1]);
            }
        }
        
        // The top element contains the minimum path sum
        return dp[0][0];
    }
};

