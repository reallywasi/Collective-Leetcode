
class Solution {
public:
    int solve(vector<vector<int>>& dp, vector<vector<int>>& obstacleGrid, int m, int n) {
        // If out of bounds
        if (m < 0 || n < 0) return 0;

        // If the cell is an obstacle
        if (obstacleGrid[m][n] == 1) return 0;

        // If we reach the start cell (0, 0)
        if (m == 0 && n == 0) return 1;

        // If value is already computed
        if (dp[m][n] != -1) return dp[m][n];

        // Compute paths from left and up
        int left = solve(dp, obstacleGrid, m, n - 1);
        int up = solve(dp, obstacleGrid, m - 1, n);

        // Save the result in dp table and return
        return dp[m][n] = left + up;
    }

    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, -1));

        // Handle base case where start or end is an obstacle
        if (obstacleGrid[0][0] == 1) return 0;

        return solve(dp, obstacleGrid, m - 1, n - 1);
    }
};
