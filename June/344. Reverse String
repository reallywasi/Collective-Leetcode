Write a function that reverses a string. The input string is given as an array of characters s.

You must do this by modifying the input array in-place with O(1) extra memory.

 

Example 1:

Input: s = ["h","e","l","l","o"]
Output: ["o","l","l","e","h"]
Example 2:

Input: s = ["H","a","n","n","a","h"]
Output: ["h","a","n","n","a","H"]

______________________________________________________________________________________________________________

class Solution {
public:
    void reverseString(vector<char>& s) {
        int l=0;
        int r=s.size()-1;

        while(l<r)
        {
            swap(s[l],s[r]);
            l++;
            r--;
        }
    }
};


__________________________________________________________________________________________________________


RECURSION



class Solution {
public:

void reverseStringRecursive(std::vector<char>& s, int left, int right) {
    // Base case: If left is no longer less than right, we are done
    if (left >= right) {
        return;
    }
    
    // Swap the characters at positions left and right
  swap(s[left], s[right]);
    
    // Recur for the rest of the string
    reverseStringRecursive(s, left + 1, right - 1);
}

    void reverseString(vector<char>& s) {
            reverseStringRecursive(s, 0, s.size() - 1);

    }
};
