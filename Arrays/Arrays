

1. SORT COLORS 
Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

 

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:

Input: nums = [2,0,1]
Output: [0,1,2]


______________________________________________________________________________________________________________________________________________


class Solution {
public:
    void sortColors(vector<int>& nums) {
        int zero_count=0;
        int one_count=0;
        int two_count=0;
        int j=0;
  for (int i = 0; i < nums.size(); i++) {
        switch (nums[i]) {
            case 0:
                zero_count++;
                break;
            case 1:
                one_count++;
                break;
            case 2:
                two_count++;
                break;
        }
    }   
     while (zero_count > 0) {
        nums[j++] = 0;
        zero_count--;
    }
   while (one_count > 0) {
        nums[j++] = 1;
        one_count--;
    }
    while (two_count > 0) {
        nums[j++] = 2;
        two_count--;
    }


    }
};

______________________________________________________________________________________________________________________________________________
##############################################################################################################################################
______________________________________________________________________________________________________________________________________________

2, Implement pow(x, n), which calculates x raised to the power n (i.e., xn).

 

Example 1:

Input: x = 2.00000, n = 10
Output: 1024.00000
Example 2:

Input: x = 2.10000, n = 3
Output: 9.26100
Example 3:

Input: x = 2.00000, n = -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25
 

Constraints:

-100.0 < x < 100.0
-231 <= n <= 231-1
n is an integer.
Either x is not zero or n > 0.
-104 <= xn <= 104

______________________________________________________________________________________________________________________________________________



class Solution {
public:
    double myPow(double x, int n) {
        long long nn=n;
        double ans=1.0;
if(nn<0){
    nn=-nn;
}
        while(nn)
        {
if(nn%2==1){
ans=ans*x;
nn=nn-1;
}
else{
    x=x*x;
    nn=nn/2;
}

        }

if(n<0){
    // ans=double(1.0)/double(ans);
ans=1/ans;

}
return ans;

    }
};


______________________________________________________________________________________________________________________________________________
##############################################################################################################################################
______________________________________________________________________________________________________________________________________________

3. You are given a 0-indexed integer array nums of even length consisting of an equal number of positive and negative integers.

You should rearrange the elements of nums such that the modified array follows the given conditions:

Every consecutive pair of integers have opposite signs.
For all integers with the same sign, the order in which they were present in nums is preserved.
The rearranged array begins with a positive integer.
Return the modified array after rearranging the elements to satisfy the aforementioned conditions.

 

Example 1:

Input: nums = [3,1,-2,-5,2,-4]
Output: [3,-2,1,-5,2,-4]
Explanation:
The positive integers in nums are [3,1,2]. The negative integers are [-2,-5,-4].
The only possible way to rearrange them such that they satisfy all conditions is [3,-2,1,-5,2,-4].
Other ways such as [1,-2,2,-5,3,-4], [3,1,2,-2,-5,-4], [-2,3,-5,1,-4,2] are incorrect because they do not satisfy one or more conditions.  
Example 2:

Input: nums = [-1,1]
Output: [1,-1]
Explanation:
1 is the only positive integer and -1 the only negative integer in nums.
So nums is rearranged to [1,-1].





______________________________________________________________________________________________________________________________________________

class Solution {
public:
    vector<int> rearrangeArray(vector<int>& nums) {
        vector<int>x(nums.size(),0);
        int i=0;
        int pos=0;
        int neg=1;

        for( i=0;i<nums.size();i++)
        {
            if(nums[i]>0)
            {
             x[pos]=nums[i];
             pos=pos+2;
            }
            else{
                x[neg]=nums[i];
                neg=neg+2;
            }

        }
   return x;
    }
};

// class Solution {
// public:
//     vector<int> rearrangeArray(std::vector<int>& nums) {
//         int n = nums.size();
//         std::vector<int> output(n, 0);
//         int pos = 0, neg = 1;
//         for (int i = 0; i < n; ++i) {
//             if (nums[i] > 0) {
//                 output[pos] = nums[i];
//                 pos += 2;
//             } else {
//                 output[neg] = nums[i];
//                 neg += 2;
//             }
//         }
//         return output;
//     }
// };


______________________________________________________________________________________________________________________________________________
##############################################################################################################################################
______________________________________________________________________________________________________________________________________________

