____________________________________________________________________________________________________________________________________________________________________________________________________
####################################################################################################################################################################################################
____________________________________________________________________________________________________________________________________________________________________________________________________

Problem statement
You are given a string 'STR' containing lowercase English letters from a to z inclusive. Your task is to find all non-empty possible subsequences of 'STR'.

A Subsequence of a string is the one which is generated by deleting 0 or more letters from the string and keeping the rest of the letters in the same order.
Detailed explanation ( Input/output format, Notes, Images )
Constraints:
1 <= T <= 10 
1 <=  |STR| <= 16

Where |STR| represents the length of the string 'STR'.

Time Limit: 1 sec
Sample Input 1:
1 
abc
Sample Output 1:
a ab abc ac b bc c
Explanation of sample input 1:
All possible subsequences of abc are :  
“a” , “b” , “c” , “ab” , “bc” , “ac”, “abc”
Sample Input 2:
1
bbb
Sample Output 2:
b b b bb bb bb bbb

____________________________________________________________________________________________________________________________________________________________________________________________________


SOLUTION : EK RECURSION TREE BANAYENGE JISME INDEX WALE ELEMENT KO LEFT SIDE ME EXCLUDE KR KE CHALENGE AND RIGHT WALE ME INCLUDE KRKE 
LOVE BABBAR VIDEO NO,. 37 KO DEKHNA IT'S AN IMPORTANT CONCEPT

____________________________________________________________________________________________________________________________________________________________________________________________________
#include <bits/stdc++.h> 

void solve(int index, string output,string str,vector<string>&ans)
{
if(index>=str.length())
{
	if(output.length()>0)
	ans.push_back(output);
	return;
}


// exclude
solve(index+1,output,str,ans) ;

//include
char ele=str[index];
output.push_back(ele);
solve(index+1,output,str,ans);


}
vector<string> subsequences(string str){
	
vector<string>ans;
string output="";
int index=0;
solve(index,output,str,ans);

return ans;
}


____________________________________________________________________________________________________________________________________________________________________________________________________
####################################################################################################################################################################################################
____________________________________________________________________________________________________________________________________________________________________________________________________

