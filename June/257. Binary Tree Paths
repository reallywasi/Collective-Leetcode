/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string> paths;  // Vector to store all root-to-leaf paths
        if (!root) return paths;  // If the root is null, return an empty vector
        dfs(root, to_string(root->val), paths);  // Start DFS with the root node
        return paths;  // Return the collected paths
    }

private:
    void dfs(TreeNode* node, string path, vector<string>& paths) {
        if (!node->left && !node->right) {  // If the node is a leaf
            paths.push_back(path);  // Add the path to the paths vector
            return;
        }
        if (node->left) {  // If there is a left child
            dfs(node->left, path + "->" + to_string(node->left->val), paths);  // Recur for left child
        }
        if (node->right) {  // If there is a right child
            dfs(node->right, path + "->" + to_string(node->right->val), paths);  // Recur for right child
        }
    }
};
